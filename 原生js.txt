Css常见面试问题
元素的水平垂直居中?
水平居中:
  行内元素 text-align;center
 已知元素高度,margin 0 auto,
flex布局,css3中的transfom:translte,
垂直居中:单行文本,line-height(已知父元素高度)
              行内块元素:display:inline-block,vertical-algin:middle
	flex,绝对定位,transform
-----------------------------------------------------
px像素单位,一个像素点就是1px
em ,参照物是父元素的font-size
rem,参照物是html的font-size
%,一般宽泛是指相对父元素
vw,viewpoint width的缩写,1vm等于视窗宽度的1%
vh,viewpoint height,视窗高度的1%
----------------------------------------------------你
单行,多行文本溢出显示省略号
text-overflow:ellipsis
overflow:hidden
white-space:nowrap
line-clamp;控制显示行数
-----------------------------------------------------
盒模型:标准盒模型:width=内容(content)
           IE(怪异盒模型) width=(content+border+padding,)
------------------------------------------------------------------
css选择器权重:!important>行内样式>id选择器>class选择器>标签选择器>通配符*选择器>继承>浏览器默认
-----------------------------------------------------------
css新特性,transition,transform(旋转,缩放,移动或者倾斜), animation:动画,gradient:渐变
------------------------------------------------------------------------------------------------
BFC格式化上下文,独立的渲染区域,让BFC内部的元素和外部的元素相互隔离,是内外元素的定位不会相互影响
如何产生:display:inline-block,postion:absolute/fixed
==================================

=================================
new关键字的原理?new做了什么事?
1.创建一个新的对象
2,新对象会被执行原型连接(实例会有一个__proto__属性指向构造函数的原型对象)
3,属性和方法被加入到 this 引用的对象中。并执行了构造函数中的方法.
4,如果函数没有返回其他对象,this就指向新对象,负责this指向构造函数中返回的对象
====================
this的指向问题
this的指向问题,完全取决于函数的最终的调用位置
1构造函数中,如果如果函数没有返回其他对象,this就指向新对象,否则this指向构造函数中返回的对象
2.通过call appl调用,或者是bind硬性绑定,this指向给定的对象
3,在某个上下文对象中调用,this绑定就是那个上下文对象
4,如果以上都不是(就在一个普通函数或者全局作用中调用),undefind(严格模式)或者是window
5,箭头函数没有自己的this,它的this继承于上一层代码块的this
===================
js判断数据类型的多种方式
typeof :返回的是一个字符串 可以正确判断string number boolean undefined function symbol
            其中 null object array  Date(),RegExp()返回的都是object 不够准确
instanecof:基于原型链查找的,不能用于检测原始数据类型
Object.prototype.toString.call()  比较准确,返回一个表示当前函数源代码的字符串
===========================================
一个对象如果要具备可被for..of循环调用的iterator接口,就是在这个对象的Symbol.iterator的属性上部署遍历器(有next方法,每次调用next方法,都会返回一个代表当前成员的信息对象,具有value,done两个属性)
==================================
js实现继承
一,原型链继承,将父类的实例作为子类的原型,缺点是引用数据类型会被所有实例共享,
二,构造函数继承,在子类中调用父类的构造函数,实现实例属性的继承,
三,组合继承,结合以上两种
四,原型式继承:重点,封装一个函数,执行给定对象的浅拷贝,返回新对象(es6 Object.create()),引用数局类型的
属性指向相同,始终会共享
五,寄生继承,基于原型式继承,并在封装的函数中,增强传入的对象,返回构造函数,类似于函数,每次创建对象都会创建一遍方法
六,组合继承继承,(组合继承中调用了两次父类构造函数,会造成实例对象,和原型对象上的属性重复)
七,class extends,子类必须在constructor中调用super方法,子类中没有自己的this,而是继承父类的this
==================================
es6新特性
结构赋值,扩展运行符,Map ,Set两种数据结构,symbol基本数据类型,class,Proxy,箭头函数,块级作用域
================================
setTimeout含义是定时器,到达指定时间执行回调
setInterval含义是计时器,到达一定时间触发一次,并且会持续触发
-------------------------------------------------------
浏览器事件环eventloop
1.js是解释型语言它的的主线程是单线程的,代码自上而下执行,形成了执行栈,(栈的进出特点是后进先出,只有一个端)
2.同步优先于异步执行,当遇到异步任务,异步任务会被(事件列表标记)挂起,等到异步完成(延时),将异步的回调函数放入事件队列,但是并不是立即执行,会等到执行栈清空后,回头检查事件队列,发现里面有任务,将其压入执行栈执行
3,另外注意异步任务分为宏任务和微任务,在宏任务入栈之前,会先清空微任务队列
- 宏仁务主要是由``setTimeout` ，`setInterval` ，`setImmediate` ，I/O ，UI rendering
- 微任务主要是`process.nextTick`, `Promise.then`, `Object.observer`, `MutationObserver`.
4.不管是同步任务,与异步任务还是异步任务都是在执行栈中执行,
============================================
数组的那些api会改变有原数组?
改变:splice fill copy sort push unshift shift
不改变:es6中的 slice map forEach reduce
防抖和节流:作用都是防止函数多次调用
区别:
   防抖:n秒内只会执行一次,如果在n秒内又触发了事件,则会重新计算函数执行事件:
         常景:resize/scroll触发统计事件,文本输入的验证(连续输入文字后发送ajax请求验证)
   节流:高频(连续触发)事件在n秒中只执行一次函数稀释函数的执行频率。只有大于这个时间后才会执行第二次
        实现:分别是时间戳版(时间段开始触发)和定时器版(时间段结束触发)。
函数柯里化? 
    接收多个参数的函数,转换为接受单个参数的函数,
===================================================
跨域解决方案?
     浏览器同源策略 协议 域名 端口
     作用: 同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互
    1.jsonp:<script>标签的src属性不受限制 
    2.Cros 
         Access-Control-Allow-Origin(允许访问的域)

        -------------------------------Methods(允许请求的方法)
                                          Headers(允许的请求头)
   3 nginx 反向代理
   4 websocket
   5 前端代理服务器(正向代理) 
==========================================================
axios的封装
axios是一个基于promise的http库,可以用在浏览器和node.js中
在项目中,为了方便后期的维护,单独创建一个文件夹,引入axios对其进行封装配置,最后导出挂载到vue原型上
1.根据环境的不同,通过node的环境变量设置baseURl
2.统一设置请求头,将通用的请求头作为基础配置
3.请求超时,响应码处理(axios提供了validateStatus属性),将所有响应都设为resolve状态,统一在then后处理
4.请求,响应处理,(transformRequset,transfromResponse),将请求或者响应序列化
5,拦截器(interceptors.)分别在请求响应被then或者catch处理前拦截他们
======================================================
vue常用指令 v-text v-html,v-bind,v-for,v-if,v-else,v-show,v-model,v-on,v-once
v-model本质是:v-bind,与input事件的语法糖
vue修饰符: 
   (事件机制的三个阶段:捕获---目标--冒泡)
   事件修饰符:.native,把一个小组件转化为普通的Html标签
                     .stop阻止事件冒泡,.prevent:阻止事件的默认行为,比如点击按钮时对表单的提交
                      .self只有事件是从绑定事件的元素本身触发时的才触发回调

.stop：等同于JavaScript中的event.stopPropagation()，防止事件冒泡
.prevent：等同于JavaScript中的event.preventDefault()，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）
.capture：与事件冒泡的方向相反，事件捕获由外到内
.self：只会触发自己范围内的事件，不包含子元素
.once：只会触发一次
                       
   键盘修饰符:.keyCode
   表单修饰符:.tirm自动过滤首位空格,.lazy.在输入框输入,光标离开才更新视图
======================================================
vue实例上的属性?
     vm.$data
     vm.$options
     vm.$nextTick,在下一次事件轮询之后执行延时回调
     vm.$watch,监控一个数据
     vm.$set:因为javascript的限制,Vue不能检测到对象属性的添加或者删除,属性必须子
    data对象上才能让Vue将他转化为响应式,vue提供了Vue.set(object,propertyName,value
),如果目标是数组,直接使用数组的splice方法触发响应式,如果是对象,就采用数据劫持动态个IE对降属性添加getter和setter
======================================================
虚拟dom的优缺点:
优点:保证性能下限,无需手动操作dom,专注于view-model层,提高开发效率,本质是js对象,更方便跨平台操作,
缺点:无法进行极致优化
实现原理:用js对象模拟真实dom树,对真实dom进行抽象
              diff算法,比较两颗虚拟dom树的差异
              pach算法,将两个虚拟dom对象的差异应用到真正的Dom树
               
======================================================
watch与computed的区别
computed:计算属性,对绑定到视图的数据进行处理,并监听变化进而执行对应的方法,有缓存行
watch是一个侦听的动作,用来观察和响应实例上的数据变动
相同点:都起到了监听一个数据,并进行处理的作用,
不同点:computed主要对于同步数据的处理,watch则主要用于观测某个值的变化
======================================================
v-for 中的key值问题
diff算法:原始的diff算法通过循环递归遍历节点进行对比,复杂度O(n^3)
             vue/react虚拟dom中的diff算法:
 相同的组件会产生类似的Dom结构,不同的组件产生的Dom结构也不同
  同一层级的子节点,可以通过唯一的id来进行区分
作用:使用 key，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。,减少dom的重绘;更高效的更新Dom
======================================================
vue的组件通信
1.
 父传子 props 
 子传父 this.$emit
2父子间:$parent $children
3.跨级通信
 provide 上级组件提供变量
 inject 下级通过inject来注册变量
4 ref&refs 
   ref作用在dom上,引用指向dom元素,作用在子组件就指向组件实例
5.eventBus 事件总线
  eventBus.$emit发送事件
  evnetBus.$on接收事件
6$attrs $listeners
  当子组件没有申明props来接收属性时,可以通过v-bind="$attrs",v-on="$lsiteners"来获取父组件
中的属性和放法
7.Vuex
==========================================================
Vue生命周期的理解
概念:就是一个vue实例从创建-初始化数据,编译模板,挂载dom->渲染,更新->渲染,销毁等一系列过程,在这个过程中vue为我们提供了八个钩子函数,使我们在监控整个实例有清晰的逻辑
beforeCreate vue实例初始化时调用,这时候实例上只有一些默认的事件
keep-alive专属的两个钩子:
      组件被激活调用:activited
      组件被销毁时调用:deactivited
===================================================
vuex:state Getters,Mutation,Action,Moudel
vue应用专门的状态管理模式,
响应式
改变状态的唯一途径就是显式的提交mutations
actions 里面放的异步函数, 里面也是要commit一个mutation
要想改变组件的视图,只能通过dispatch一个action,action提交一个mutations来改变状态,
辅助函数
原理:
1,vuex是一个插件,use会调用install方法
2,通过Vue的mixin机制,在实例beforecreate之前将store混入所有实例,
3在store上new Vue,让state中的数据变为响应式
================================================
vue-router
$route"是路由信息对象",包括path,params,hash,query,fullpath,matched,name等路由信息参数
$router是路由实例,包括路由的跳转方法,钩子函数
路由钩子的三个参数(to,from,next)
to:将要进入的目标,路由对象
from:正要离开的目标
next:() 一定要调用这个方法来resovle这个钩子,进行下一个钩子
    全局路由守卫:router.beforeEach,router.afterEach,router.beforeResolve,
    组件内的路由守卫; beforeRouteEenter,beforeRouteUpdate,beforeRouteLeave
    路由独享守卫:beforeEnter
=========================================================
hash模式:基于location.hash,会在浏览器留下痕迹,浏览器可以前进后退,
               通过a标签的href属性,或者js对localtion.hash进行赋值,改变hash
	通过hashchange,来监听hash的变化,从而对页面进行调转
history:
           html5提供的api history.pushState(),与history.replaceState()来操作url变化
          通过popState来监听url的变化,从而对页面进行跳转,但是以上两个api不会触发popstate事件,需要
	手动触发
abstract:支持所有js运行环境,比如Node.js服务器端
=========================================================
VueSSR 服务端渲染,vue在客户端将便签渲染成整个html片段的工作在服务端完成,
            然后将形成的html片段直接返回给客户端这个过程叫做服务端渲染
    优点:更好的seo优化,spa单页应用是通过ajax获取的,搜索引擎不会等待ajax异步完成后在专区页面内容
    缺点:ssr只支持beforeCreate,created两个钩子,服务器负载比较重
==========================================================
vue项目优化:
    代码角度:规范,不要把所有的数据放到data中
              keepAlive实现组件的缓存
              能拆分的组件尽可能拆分,减少不必要的渲染
	v-for 必须加上key,并且避免使用v-if
  用户体验角度:图片懒加载,
SEO 搜索引擎优化
      网页结构简单,扁平化,尽量不超过三级 
     控制首页链接数量
    <img>便签,必须加上alt title属性
   导航优化(面包屑)
后端的角度:对比缓存 gzip压缩  CDN的使用
========================================
Vue3.0 
 数据监测机制的改变,基于proxy的Observer事件
.....===================================
react生命周期

==========================================
webpack 是js应用程序的打包工具,根据模块依赖进行静态分析,最终按指定的规则打包成优化
的资源;
核心概念:entry;output loader(处理,非js文件),plugin插件系统,打包优化,资源管理和注入环境变量
原理:把页面逻辑当成一个整体,通过给定的入口文件,webpack从这文件开始,找到所有的依赖文件
对其依次进行递归分析,然后进行打包,编译,压缩,最后输出一个浏览器可以识别的代码
基本功能:代码转化,文件优化,自动刷新
如何优化webpack构建的性能?
一,1.减少代码体积,SplitChunkPlugin,提取通用模块,减少总体代码体积
           将一部分依赖使用CDN引入,避免编译过程都由webpack处理
           对一些组件库采用按需加载,避免无用的代码
     2,减少检索路径,resolve.alias可以配置webpack模块解析的别名
     3,减少目录的检索范围
        在使用loader的时候,通过制定exclude和include选项,减少loader遍历的目录范围
 ================================================
状态码:
200 成功处理请求
204 no content 请求成功,但是响应报文中不含实体的主体部分
3xx 一般与重定向有关
301 永久重定向 302 临时重定向 ,304 not modifield 缓存,未满足缓存机制的条件
4xx 客户端错误
400,请求报文存在错误,401 未认证,表示发送的请求需要通过http的认证信息
402请求被拒绝,没有权限访问
404,表示没有在服务端找到资源
5xx 服务端错误,500执行请求时出错,501服务器不支持当前所需要的某个功能,
503,服务器处于超负荷工作,或者维护,无法处理请求
请求头:accept-encoding,告诉服务器接收的数据支持的压缩格式
           if-modified-since:对比缓存,user-agent
响应头:lost-modified,expires,content-encoding,content-type,
===============================================
XMLHttpRequest=>ajax=>fetch=>axios
var xhr=new XMLHttpRequest();
ajax是juery对原生XHL的封装
===============================================
小程序页面声明周期:onload onShow onReady,onHide,onUnload
uni-app应用生命周期:onLaunch onShow onHide,onError onUniNviewMessage
应用生命周期仅可在app.vue中监听,在其他页面监听无效
页面 :onResze,监听窗口尺寸变化onPullDownRefresh,监听用户下拉动作,
路由跳转:两种方式:使用navigator组件跳转,调用api跳转
uni.navigateTo uni.redireactTo,uni.navigateBack,uni.switchTab,uni.relaunch
单平台配置,可以在package.json中配置,如果是针对所有平台配置,可以在vue.config.js中配置
===============================================
Node是采用谷歌V8引擎,异步IO非阻塞,基于事件驱动的Js运行环境
核心: 全局对象process
         常用工具
         事件机制
Express与Koa
express是一个保持最小规模的灵活的node.jsweb应用程序开发框架(线性模型,)
koa积极更小,通过async函数,丢弃回调函数写法,更好的错误处理,没有绑定中间件(洋葱模型)next()执行下一个中间件
======,=============================================
https与http的主要区别
https协议与需要到CA申请证书,需要收费
http运行在TCB之上,传输内容都是明文,https运行在ssl/tls之上,SSL,TLS运行在tcb上内容加密
两者连接方式不同,端口也不同,80,后者为443
http是无状态的,https需要身份认证,可以有效的防止运营商劫持,http安全
============================================
前后端分离开发的好处
1减轻动态服务器的压力,将静态内容请求分离出来,
2前后端都专注于自己擅长的业务,后台专心从事框架和业务的开发,进行更准确的单元测试
3 前台项目更加规范化,模块化,让前端逻辑更加清晰明了
4,项目解耦,维护和bug的修复更加容易,各自有各自的编辑器



















